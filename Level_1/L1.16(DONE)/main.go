package main

import "fmt"

func quickSortArr(arr []int) {
	quickSort(arr, 0, len(arr)-1)
}

// в функцию передается разделяющий элемент вокруг которого будут упорядочны элементы.
// Элементы перемещаются так, чтобы значения меньше pivot оказались левее, а те что больше правее
func partition(arr []int, L, R, pivot int) int {
	for L <= R {
		// если значении значение меньше, то двигаем индекс L вправо,
		// до тех пор пока не найдем элемент больше pivot
		for arr[L] < pivot {
			L++
		}
		// если значении значение больше, то двигаем индекс R влево,
		// до тех пор пока не найдем элемент меньше pivot
		for arr[R] > pivot {
			R--
		}

		// меняем местами значения встроенными методами языка если индексы удовлетворяют условию
		if L <= R {
			arr[L], arr[R] = arr[R], arr[L]
			L++
			R--
		}
	}

	return L
}

// метод вызывает сам себя для сортировки частей массива
func quickSort(arr []int, s, e int) {

	// условие при котором сортировка завершена
	if s >= e {
		return
	}

	// вычисляем индекс для pivot как средний элемент массива
	mid := (s + e) / 2

	// находим значение среднего элемента массива
	pivot := arr[mid]

	// partiotion возвращает индекс разделения
	index := partition(arr, s, e, pivot)
	// сортируем левую часть массива
	quickSort(arr, s, index-1)
	// сортируем правую часть массива
	quickSort(arr, index, e)
}

func main() {

	arr := []int{10, 9, 3, 7, 4, 6, 12, 2, 5, 11, 8, 1}

	quickSortArr(arr)

	fmt.Println(arr)

}
